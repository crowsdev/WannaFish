// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WannaFish.OpenMeteoAPI;
//
//    var weatherData001 = WeatherData001.FromJson(jsonString);

namespace WannaFish.OpenMeteoAPI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WeatherData001
    {
        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }

        [JsonProperty("generationtime_ms")]
        public double GenerationtimeMs { get; set; }

        [JsonProperty("utc_offset_seconds")]
        public long UtcOffsetSeconds { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        [JsonProperty("timezone_abbreviation")]
        public string TimezoneAbbreviation { get; set; }

        [JsonProperty("elevation")]
        public long Elevation { get; set; }

        [JsonProperty("hourly_units")]
        public HourlyUnits HourlyUnits { get; set; }

        [JsonProperty("hourly")]
        public Hourly Hourly { get; set; }
    }

    public partial class Hourly
    {
        [JsonProperty("time")]
        public List<string> Time { get; set; }

        [JsonProperty("temperature_2m")]
        public List<double> Temperature2M { get; set; }

        [JsonProperty("wind_speed_10m")]
        public List<double> WindSpeed10M { get; set; }

        [JsonProperty("precipitation_probability")]
        public List<long> PrecipitationProbability { get; set; }

        [JsonProperty("wind_direction_10m")]
        public List<long> WindDirection10M { get; set; }
    }

    public partial class HourlyUnits
    {
        [JsonProperty("time")]
        public string Time { get; set; }

        [JsonProperty("temperature_2m")]
        public string Temperature2M { get; set; }

        [JsonProperty("wind_speed_10m")]
        public string WindSpeed10M { get; set; }

        [JsonProperty("precipitation_probability")]
        public string PrecipitationProbability { get; set; }

        [JsonProperty("wind_direction_10m")]
        public string WindDirection10M { get; set; }
    }

    public partial class WeatherData001
    {
        public static WeatherData001 FromJson(string json) => JsonConvert.DeserializeObject<WeatherData001>(json, WannaFish.OpenMeteoAPI.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WeatherData001 self) => JsonConvert.SerializeObject(self, WannaFish.OpenMeteoAPI.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
