// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WannaFish.OpenMeteoAPI;
//
//    var weatherData002 = WeatherData002.FromJson(jsonString);

namespace WannaFish.OpenMeteoAPI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WeatherData002
    {
        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }

        [JsonProperty("generationtime_ms")]
        public double GenerationtimeMs { get; set; }

        [JsonProperty("utc_offset_seconds")]
        public long UtcOffsetSeconds { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        [JsonProperty("timezone_abbreviation")]
        public string TimezoneAbbreviation { get; set; }

        [JsonProperty("elevation")]
        public long Elevation { get; set; }

        [JsonProperty("current_units")]
        public CurrentUnits CurrentUnits { get; set; }

        [JsonProperty("current")]
        public Current Current { get; set; }
    }

    public partial class Current
    {
        [JsonProperty("time")]
        public string Time { get; set; }

        [JsonProperty("interval")]
        public long Interval { get; set; }

        [JsonProperty("temperature_2m")]
        public double Temperature2M { get; set; }

        [JsonProperty("precipitation")]
        public long Precipitation { get; set; }

        [JsonProperty("wind_speed_10m")]
        public double WindSpeed10M { get; set; }

        [JsonProperty("wind_direction_10m")]
        public long WindDirection10M { get; set; }
    }

    public partial class CurrentUnits
    {
        [JsonProperty("time")]
        public string Time { get; set; }

        [JsonProperty("interval")]
        public string Interval { get; set; }

        [JsonProperty("temperature_2m")]
        public string Temperature2M { get; set; }

        [JsonProperty("precipitation")]
        public string Precipitation { get; set; }

        [JsonProperty("wind_speed_10m")]
        public string WindSpeed10M { get; set; }

        [JsonProperty("wind_direction_10m")]
        public string WindDirection10M { get; set; }
    }

    public partial class WeatherData002
    {
        public static WeatherData002 FromJson(string json) => JsonConvert.DeserializeObject<WeatherData002>(json, WannaFish.OpenMeteoAPI.Converter002.Settings);
    }

    public static class Serialize002
    {
        public static string ToJson(this WeatherData002 self) => JsonConvert.SerializeObject(self, WannaFish.OpenMeteoAPI.Converter002.Settings);
    }

    internal static class Converter002
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
